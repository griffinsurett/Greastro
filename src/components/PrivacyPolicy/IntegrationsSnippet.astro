---
// src/components/PrivacyPolicy/IntegrationsSnippet.astro

export interface Props {
  number?: string | number;
  title?: string;
}

// Type for environment variables
interface IntegrationEnv {
  [key: string]: string | undefined;
}

const {
  number = "",
  title = "",
} = Astro.props as Props;

// Helper function to extract provider name from URL
const extractProviderName = (url: string): string | null => {
  try {
    const urlObj = new URL(url);
    // Get the first part of the hostname (e.g., "google" from "google.com")
    const hostParts = urlObj.host.split(".");
    return hostParts[0] || null;
  } catch {
    return null;
  }
};

// Type-safe environment variable processing
const env = import.meta.env as IntegrationEnv;

const providers: string[] = Array.from(
  new Set(
    Object.entries(env)
      .filter((entry): entry is [string, string] => {
        const [key, value] = entry;
        return key.startsWith("PUBLIC_INTEGRATION_") && typeof value === "string";
      })
      .map(([, url]) => extractProviderName(url))
      .filter((name): name is string => name !== null)
  )
);

// Helper function to capitalize provider name
const capitalizeProvider = (name: string): string => {
  return name.charAt(0).toUpperCase() + name.slice(1);
};
---

{providers.length > 0 ? (
  <div>
    <h2 class="flex items-baseline">
      {number && <span class="mr-2">{number}</span>}
      {title && <span>{title}</span>}
    </h2>
    <p>We integrate with the following companies for forms, CRM, analytics, etc.:</p>
    <ul class="list-disc ml-6">
      {providers.map((name) => (
        <li>{capitalizeProvider(name)}</li>
      ))}
    </ul>
    <p class="mt-2">
      None of these providers store data on our servers; they forward
      submissions/events directly to us.
    </p>
  </div>
) : null}