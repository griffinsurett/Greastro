---
// src/components/preferences/language/GoogleTranslateScript.astro
/**
 * Google Translate Integration Script
 * 
 * Handles lazy loading of Google Translate API and provides window.changeLanguage()
 * function for the language switcher component.
 * 
 * Uses localStorage caching to avoid unnecessary API loads on subsequent visits.
 */
---

<script>
  import { setCookie, clearCookie } from '@/utils/cookies';
  import { getStorageItem, setStorageItem, clearStorageByPrefix } from '@/utils/storage';

  // Type definitions for this file only
  declare global {
    interface Window {
      initializeGoogleTranslate?: () => void;
      changeLanguage?: (languageCode: string) => void;
    }
  }

  // Check if we have cached translation
  const savedLang = getStorageItem('user-language');
  const cacheKey = `translated_body_${savedLang}_${window.location.pathname}`;
  const hasCachedTranslation = savedLang && savedLang !== 'en' && getStorageItem(cacheKey);
  
  // CRITICAL: Only load Google Translate if we DON'T have cached content
  if (!hasCachedTranslation) {
    // Initialize Google Translate
    window.initializeGoogleTranslate = function() {
      const google = (window as any).google;
      if (typeof google === 'undefined' || !google?.translate) return;

      const checkReady = setInterval(function() {
        if (google?.translate?.TranslateElement) {
          clearInterval(checkReady);
          
          new google.translate.TranslateElement({
            pageLanguage: 'en',
            includedLanguages: '',
            autoDisplay: false,
          }, 'google_translate_element');
        }
      }, 100);
    };

    // Public function for language switcher
    window.changeLanguage = function(languageCode: string) {
      setStorageItem('user-language', languageCode);
      
      // Clear translation cache when language changes
      clearStorageByPrefix('translated_body_');
      
      if (languageCode === 'en') {
        clearCookie('googtrans');
      } else {
        setCookie('googtrans', `/en/${languageCode}`, { expires: 365 });
      }
      
      // Scroll to top before reload
      window.scrollTo(0, 0);
      
      // Use href assignment instead of reload()
      window.location.href = window.location.href;
    };

    // Load Google Translate script
    (function() {
      const script = document.createElement('script');
      script.src = 'https://translate.google.com/translate_a/element.js?cb=initializeGoogleTranslate';
      script.async = true;
      document.head.appendChild(script);
    })();
  } else {
    console.log('ðŸš€ Using cached translation - skipping Google Translate API load');
    
    // Still provide changeLanguage function
    window.changeLanguage = function(languageCode: string) {
      setStorageItem('user-language', languageCode);
      
      // Clear cache
      clearStorageByPrefix('translated_body_');
      
      if (languageCode === 'en') {
        clearCookie('googtrans');
      } else {
        setCookie('googtrans', `/en/${languageCode}`, { expires: 365 });
      }
      
      // Scroll to top before reload
      window.scrollTo(0, 0);
      
      // Use href assignment instead of reload()
      window.location.href = window.location.href;
    };
  }
</script>

<div id="google_translate_element" style="display: none;"></div>

<style>
  .goog-te-banner-frame,
  .goog-te-balloon-frame,
  .goog-te-gadget,
  .skiptranslate,
  iframe.goog-te-menu-frame,
  #google_translate_element,
  body > .skiptranslate,
  iframe.skiptranslate {
    display: none !important;
  }

  body {
    top: 0 !important;
  }
</style>