---
// src/components/section/Section.astro
import type { CollectionKey } from 'astro:content';
import { getVariantComponents } from '@/components/section/variants/utils/VariantUtils';
import { getCollectionWithMeta, prepareCollectionEntries } from '@/utils/collections';
import { shouldCollectionHavePage } from '@/utils/pages';

const variantComponents = await getVariantComponents();

interface Props {
  collection?: CollectionKey;
  variant?: string;
  title?: string;
  description?: string;
  [key: string]: any;
}

const { 
  collection, 
  variant = 'GridVariant',
  title: titleOverride,
  description: descriptionOverride,
  ...restProps 
} = Astro.props;

let data: any;

if (collection) {
  const { entries, meta } = await getCollectionWithMeta(collection);
  const items = await prepareCollectionEntries(entries, collection, meta);
  
  const currentPath = Astro.url.pathname;
  const collectionIndexPath = `/${collection}`;
  const isOnCollectionPage = currentPath === collectionIndexPath || currentPath === `${collectionIndexPath}/`;
  
  data = { 
    items,
    // Allow prop overrides, fallback to meta
    title: titleOverride ?? meta.title,
    description: descriptionOverride ?? meta.description,
    collectionUrl: shouldCollectionHavePage(meta) && !isOnCollectionPage ? collectionIndexPath : undefined,
    collectionTitle: meta.title || collection.charAt(0).toUpperCase() + collection.slice(1),
    ...restProps 
  };
} else {
  data = restProps.items ? restProps : { items: [], ...restProps };
}

const VariantComponent = variantComponents[variant];
if (!VariantComponent) {
  throw new Error(`Variant "${variant}" not found`);
}
---
<VariantComponent {...data} />