---
// src/components/section/Section.astro
import { getCollection } from 'astro:content';
import type { CollectionKey } from 'astro:content';
import { getVariantComponents } from '@/components/section/variants/utils/VariantUtils';
import { prepareCollectionData, prepareStaticData } from '@/components/section/variants/utils/DataPreparer';
import { getCollectionMeta } from '@/utils/fetchMeta';
import { shouldCollectionHavePage } from '@/utils/pageUtils';

const variantComponents = await getVariantComponents();

interface Props {
  collection?: CollectionKey;
  variant?: string;
  [key: string]: any;
}

const {
  collection,
  variant = 'GridVariant',
  ...restProps
} = Astro.props;

let data: any;
const currentPath = Astro.url.pathname;

if (collection) {
  const entries = await getCollection(collection);
  const items = await prepareCollectionData(entries, collection);
  const collectionMeta = getCollectionMeta(collection);
  
  const collectionIndexPath = `/${collection}`;
  const isOnCollectionPage = currentPath === collectionIndexPath || currentPath === `${collectionIndexPath}/`;
  
  const collectionUrl = shouldCollectionHavePage(collectionMeta) && !isOnCollectionPage 
    ? collectionIndexPath 
    : undefined;
    
  const collectionTitle = collectionMeta.title || collection.charAt(0).toUpperCase() + collection.slice(1);
  
  data = { 
    items, 
    collectionUrl,
    collectionTitle,
    ...restProps 
  };
} else {
  data = prepareStaticData(Astro.props);
}

const VariantComponent = variantComponents[variant];
if (!VariantComponent) {
  throw new Error(`Variant "${variant}" not found. Available: ${Object.keys(variantComponents).join(', ')}`);
}
---
<VariantComponent {...data} />