---
import { getEntry } from 'astro:content';

export interface Props {
  entries: any[];
  collection: string;
  title?: string;
  description?: string;
  className?: string;
  columns?: 1 | 2 | 3;
}

const { 
  entries, 
  collection,
  title,
  description,
  className = '',
  columns = 2
} = Astro.props;

// Debug to see what we're getting
console.log('First entry author field:', entries[0]?.data?.author);

// With reference(), the author should already be resolved
const entriesWithAuthors = await Promise.all(
  entries.map(async (entry) => {
    let author = null;
    if (entry.data.author) {
      // When using reference() with file loader, this should be a reference object
      try {
        author = await getEntry(entry.data.author);
        console.log('Resolved author:', author);
      } catch (e) {
        console.log('Error getting author:', e);
      }
    }
    return { ...entry, author };
  })
);

const columnClasses = {
  1: 'grid-cols-1',
  2: 'grid-cols-1 lg:grid-cols-2',
  3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
};
---

<section class={`py-16 ${className}`}>
  {(title || description) && (
    <div class="text-center mb-12">
      {title && <h2 class="text-4xl font-bold mb-4">{title}</h2>}
      {description && <p class="text-lg text-gray-600 max-w-2xl mx-auto">{description}</p>}
    </div>
  )}
  
  <div class={`grid ${columnClasses[columns]} gap-8`}>
    {entriesWithAuthors.map(({ data, slug, author }) => (
      <article class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">        
        <div class="p-6">
          {/* Article info */}
          <div class="mb-4">
            {data.tags && data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-3">
                {data.tags.slice(0, 3).map((tag: string) => (
                  <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                    {tag}
                  </span>
                ))}
              </div>
            )}
            
            <h3 class="text-2xl font-bold mb-2">
              <a href={`/${collection}/${slug}`} class="text-gray-900 hover:text-blue-600 transition-colors">
                {data.title}
              </a>
            </h3>
            
            <p class="text-gray-600 mb-4 line-clamp-2">
              {data.description}
            </p>
            
            <div class="flex items-center text-sm text-gray-500 gap-4">
              {data.publishDate && (
                <time>{data.publishDate.toLocaleDateString()}</time>
              )}
            </div>
          </div>
          
          {/* Author info */}
          {author && (
            <div class="pt-4 mt-4 border-t border-gray-200">
              <div class="flex items-center gap-3">
                <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
                  <span class="text-blue-600 text-sm font-bold">
                    {author.data.title.split(' ').map((n: string) => n[0]).join('')}
                  </span>
                </div>
                <div>
                  <p class="font-medium text-gray-900">
                    {author.data.title}
                  </p>
                  {author.data.role && (
                    <p class="text-xs text-gray-500">{author.data.role}</p>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </article>
    ))}
  </div>
</section>

<style>
  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
</style>