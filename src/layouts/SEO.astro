---
// src/layouts/SEO.astro
import defaultOGImage from "@/assets/astro.svg";
import { siteData } from "@/content/siteData";
import type { ImageInput } from "@/types";
import type { SEOData } from "@/content/schema";

export interface Props {
  title?: string;
  description?: string;
  image?: ImageInput;
  author?: string;
  publishDate?: Date | string;
  seo?: SEOData;
  siteName?: string;
}

const {
  title,
  description,
  image,
  author,
  publishDate,
  seo = {},
  siteName = siteData.title,
} = Astro.props;

// Helper function to extract image URL
const getImageUrl = (img: ImageInput | undefined): string => {
  if (!img) return defaultOGImage.src;
  if (typeof img === 'string') return img;
  if (typeof img === 'object') {
    // Handle ImageMetadata
    if ('src' in img && typeof img.src === 'string' && 'format' in img) {
      return img.src;
    }
    // Handle { src: string | ImageMetadata, alt?: string }
    if ('src' in img) {
      if (typeof img.src === 'string') return img.src;
      if (typeof img.src === 'object' && 'src' in img.src) {
        return img.src.src;
      }
    }
  }
  return defaultOGImage.src;
};

// Build final values with hierarchy: seo overrides > content fields > site defaults
const baseTitle = title || "Page";
const baseDescription = description || siteData.description;
const baseImageUrl = getImageUrl(image);

// Meta tags
const finalMetaTitle = seo.metaTitle || `${baseTitle} | ${siteData.title}`;
const finalMetaDescription = seo.metaDescription || baseDescription;

// Open Graph
const finalOgTitle = seo.ogTitle || seo.metaTitle || baseTitle;
const finalOgDescription = seo.ogDescription || seo.metaDescription || baseDescription;
const finalOgImageUrl = getImageUrl(seo.ogImage) || baseImageUrl;
const finalOgType = seo.ogType || "website";

// Twitter
const finalTwitterTitle = seo.twitterTitle || seo.ogTitle || finalOgTitle;
const finalTwitterDescription = seo.twitterDescription || seo.ogDescription || finalOgDescription;
const finalTwitterImageUrl = getImageUrl(seo.twitterImage || seo.ogImage) || finalOgImageUrl;
const finalTwitterCard = seo.twitterCard || "summary_large_image";

// Other SEO
const finalKeywords = seo.keywords || ["astro", "static site generator", "web development"];
const finalCanonicalUrl = seo.canonicalUrl || `${siteData.url}${Astro.url.pathname}`;
const effectiveRobots = seo.robots || "index, follow";

// Author and Publisher - always use site data for publisher
const authorName = author || siteData.title;
const publisherName = siteData.legalName || siteData.title;

// Make URLs absolute
const makeAbsolute = (url: string): string => {
  if (url.startsWith('http')) return url;
  if (url.startsWith('/')) return `${siteData.url}${url}`;
  return `${siteData.url}/${url}`;
};

const absoluteOgImage = makeAbsolute(finalOgImageUrl);
const absoluteTwitterImage = makeAbsolute(finalTwitterImageUrl);

// Structured data
const schemaType = !publishDate ? "WebSite" : "Article";

const structuredData = {
  "@context": "https://schema.org",
  "@type": schemaType,
  "name": finalOgTitle,
  "headline": finalOgTitle,
  "description": finalOgDescription,
  "image": absoluteOgImage,
  "url": finalCanonicalUrl,
  "publisher": {
    "@type": "Organization",
    "name": publisherName,
    "url": siteData.url,
    "logo": {
      "@type": "ImageObject",
      "url": makeAbsolute(defaultOGImage.src),
      "width": 60,
      "height": 60
    }
  },
  "author": {
    "@type": publishDate ? "Person" : "Organization",
    "name": authorName,
  },
  ...(publishDate && {
    "datePublished": new Date(publishDate).toISOString(),
    "dateModified": new Date(publishDate).toISOString(),
  }),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": finalCanonicalUrl
  }
};
---

<!-- Primary Meta Tags -->
<title>{finalMetaTitle}</title>
<meta name="title" content={finalMetaTitle} />
<meta name="description" content={finalMetaDescription} />
<meta name="author" content={authorName} />
<meta name="publisher" content={publisherName} />
<meta name="keywords" content={finalKeywords.join(", ")} />
<link rel="canonical" href={finalCanonicalUrl} />
<meta name="robots" content={effectiveRobots} />

<!-- Open Graph -->
<meta property="og:title" content={finalOgTitle} />
<meta property="og:description" content={finalOgDescription} />
<meta property="og:image" content={absoluteOgImage} />
<meta property="og:type" content={finalOgType} />
<meta property="og:url" content={finalCanonicalUrl} />
<meta property="og:site_name" content={siteName} />
{publishDate && <meta property="article:published_time" content={new Date(publishDate).toISOString()} />}
<meta property="article:author" content={authorName} />
<meta property="article:publisher" content={publisherName} />

<!-- Twitter -->
<meta name="twitter:card" content={finalTwitterCard} />
<meta name="twitter:title" content={finalTwitterTitle} />
<meta name="twitter:description" content={finalTwitterDescription} />
<meta name="twitter:image" content={absoluteTwitterImage} />
<meta name="twitter:site" content={publisherName} />
<meta name="twitter:creator" content={authorName} />

<!-- JSON-LD -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />