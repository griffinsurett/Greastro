---
// src/pages/[collection]/[slug].astro
import { getCollection } from "astro:content";
import type { CollectionKey } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { collections } from "@/content/config";
import { getCollectionMeta } from "@/utils/fetchMeta";
import { getItemKey } from "@/utils/getItemKey";
import {
  shouldItemHavePage,
  shouldProcessCollectionItems,
} from "@/utils/hasPageUtils";

export async function getStaticPaths() {
  const names = Object.keys(collections) as CollectionKey[];
  const paths: Array<{
    params: { collection: string; slug: string };
    props: any;
  }> = [];

  for (const coll of names) {
    // Check if this collection needs processing
    const shouldProcess = await shouldProcessCollectionItems(coll);
    if (!shouldProcess) continue;

    const meta = getCollectionMeta(coll);
    const entries = await getCollection(coll);

    entries
      .filter((entry) => shouldItemHavePage(entry, meta))
      .forEach((entry) => {
        paths.push({
          params: {
            collection: coll,
            slug: getItemKey(entry),
          },
          props: { entry },
        });
      });
  }

  return paths;
}

const { entry } = Astro.props;
const { data } = entry;

// Check if this entry can be rendered (MDX/MD files have render, JSON files don't)
let Content = null;
let hasContent = false;

if (typeof entry.render === "function") {
  const rendered = await entry.render();
  Content = rendered.Content;
  // Check if there's actual content in the body (for MDX/MD files)
  hasContent = entry.body && entry.body.trim().length > 0;
}
---
<BaseLayout title={data.title} description={data.description}>
  {
    hasContent && Content ? (
      <Content />
    ) : (
      <div>
        <h1>{data.title}</h1>
        {data.description && <p>{data.description}</p>}
      </div>
    )
  }
</BaseLayout>
