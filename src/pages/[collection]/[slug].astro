---
// src/pages/[collection]/[slug].astro
import { getCollection } from "astro:content";
import type { CollectionKey } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { collections } from "@/content/config";
import { getCollectionMeta } from "@/utils/fetchMeta";
import { getItemKey } from "@/utils/getItemKey";

export async function getStaticPaths() {
  const names = Object.keys(collections) as CollectionKey[];
  const paths: Array<{ params: { collection: string; slug: string }; props: any }> = [];

  for (const coll of names) {
    const meta = getCollectionMeta(coll);
    
    if (!meta.itemsHasPage) continue;

    const entries = await getCollection(coll);
    entries
      .filter((entry) => {
        if ('hasPage' in entry.data && entry.data.hasPage === false) {
          return false;
        }
        return true;
      })
      .forEach((entry) => {
        paths.push({
          params: { 
            collection: coll, 
            slug: getItemKey(entry) 
          },
          props: { entry },
        });
      });
  }

  return paths;
}

const { entry } = Astro.props;
const { data } = entry;

// Check if this entry can be rendered (MDX/MD files have render, JSON files don't)
let Content = null;
let hasContent = false;

if (typeof entry.render === "function") {
  const rendered = await entry.render();
  Content = rendered.Content;
  // Check if there's actual content in the body (for MDX/MD files)
  hasContent = entry.body && entry.body.trim().length > 0;
}
---

<Layout title={data.title}>
  {hasContent && Content ? (
    <Content />
  ) : (
    <div>
      <h1>{data.title}</h1>
      {data.description && <p>{data.description}</p>}
    </div>
  )}
</Layout>