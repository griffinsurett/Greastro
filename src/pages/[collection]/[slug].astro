---
// src/pages/[collection]/[slug].astro
import { getCollection } from "astro:content";
import { getCollectionMeta, getItemKey } from "@/utils/collections";
import { buildItemSEOProps } from "@/utils/seo";
import { shouldItemHavePage, shouldProcessCollection } from "@/utils/pages";
import { getLayoutName, getLayoutComponent } from "@/layouts/collections/helpers/layoutUtils";
import { getPageCollections } from "@/utils/pageGeneration";

export async function getStaticPaths() {
  const names = getPageCollections();
  const paths: Array<{
    params: { collection: string; slug: string };
    props: any;
  }> = [];

  for (const coll of names) {
    const shouldProcess = await shouldProcessCollection(coll);
    if (!shouldProcess) continue;

    const meta = getCollectionMeta(coll);
    const entries = await getCollection(coll);

    entries
      .filter((entry) => shouldItemHavePage(entry, meta))
      .forEach((entry) => {
        paths.push({
          params: {
            collection: coll,
            slug: getItemKey(entry),
          },
          props: { 
            entry,
            collectionMeta: meta,
            collectionName: coll
          },
        });
      });
  }

  return paths;
}

const { entry, collectionMeta, collectionName } = Astro.props;

// Get the layout name from meta or use default
const layoutName = getLayoutName(collectionMeta, entry, true);

// Get the actual layout component
const LayoutComponent = await getLayoutComponent(layoutName);

// Prepare content if MDX
let Content = null;
if (typeof entry.render === "function") {
  const rendered = await entry.render();
  Content = rendered.Content;
}

const seoProps = await buildItemSEOProps(entry, collectionMeta);
---
<LayoutComponent
  entry={entry}
  collection={collectionName}
  collectionMeta={collectionMeta}
  seoProps={seoProps}
  Content={Content}
  {...collectionMeta}  
/>