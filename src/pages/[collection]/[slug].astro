---
// src/pages/[collection]/[slug].astro
import { getCollection } from "astro:content";
import type { CollectionKey } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { collections } from "@/content/config";
import { getCollectionMeta } from "@/utils/fetchMeta";
import { getItemKey } from "@/utils/getItemKey";
import { buildItemSEOProps } from "@/utils/seoUtils";
import {
  shouldItemHavePage,
  shouldProcessCollection,
} from "@/utils/pageUtils";

export async function getStaticPaths() {
  const names = Object.keys(collections) as CollectionKey[];
  const paths: Array<{
    params: { collection: string; slug: string };
    props: any;
  }> = [];

  for (const coll of names) {
    const shouldProcess = await shouldProcessCollection(coll);
    if (!shouldProcess) continue;

    const meta = getCollectionMeta(coll);
    const entries = await getCollection(coll);

    entries
      .filter((entry) => shouldItemHavePage(entry, meta))
      .forEach((entry) => {
        paths.push({
          params: {
            collection: coll,
            slug: getItemKey(entry),
          },
          props: { 
            entry,
            collectionMeta: meta,
            collectionName: coll
          },
        });
      });
  }

  return paths;
}

const { entry, collectionMeta, collectionName } = Astro.props;
const { data } = entry;

let Content = null;
let hasContent = false;

if (typeof entry.render === "function") {
  const rendered = await entry.render();
  Content = rendered.Content;
  hasContent = entry.body && entry.body.trim().length > 0;
}

const seoProps = await buildItemSEOProps(entry, collectionMeta);
---

<BaseLayout {...seoProps}>
  <main class="container mx-auto px-4 py-8">
    {
      hasContent && Content ? (
        <article class="prose lg:prose-xl mx-auto">
          <Content />
        </article>
      ) : (
        <div>
          <h1>{data.title}</h1>
          {data.description && <p>{data.description}</p>}
        </div>
      )
    }
  </main>
</BaseLayout>