---
// src/pages/[collection]/index.astro
import type { CollectionKey } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Section from "@/components/section/Section.astro";
import { collections } from "@/content/config";
import { getCollectionMeta } from "@/utils/fetchMeta";
import { shouldCollectionHavePage } from "@/utils/hasPageUtils";
import { getCollectionMetaMDX } from "@/utils/indexMdxUtils";

export async function getStaticPaths() {
  const names = Object.keys(collections) as CollectionKey[];
  const paths = [];

  for (const coll of names) {
    const meta = getCollectionMeta(coll);
    
    if (shouldCollectionHavePage(meta)) {
      paths.push({ 
        params: { collection: coll },
        props: { meta }
      });
    }
  }

  return paths;
}

const { collection } = Astro.params;
const { meta } = Astro.props;

// Check for MDX content using our utility
const mdxResult = await getCollectionMetaMDX(collection);
const MDXContent = mdxResult?.hasContent ? mdxResult.Component : null;

// Simple capitalization inline
const pageTitle = meta.title || collection.charAt(0).toUpperCase() + collection.slice(1);
const pageDescription = meta.description || `Browse our ${collection} collection`;

// Build SEO object from flat fields
const seoData = {
  metaTitle: meta.metaTitle,
  metaDescription: meta.metaDescription,
  ogTitle: meta.ogTitle,
  ogDescription: meta.ogDescription,
  ogImage: meta.ogImage,
  ogType: meta.ogType,
  twitterTitle: meta.twitterTitle,
  twitterDescription: meta.twitterDescription,
  twitterImage: meta.twitterImage,
  twitterCard: meta.twitterCard,
  robots: meta.robots,
  canonicalUrl: meta.canonicalUrl,
  keywords: meta.keywords,
};

// Prepare SEO props for collection page
const seoProps = {
  title: pageTitle,
  description: pageDescription,
  featuredImage: meta.featuredImage,
  
  // SEO data from flat fields
  seo: seoData,
  
  // Direct fields for backwards compatibility
  robots: meta.robots,
  keywords: meta.keywords,
  canonicalUrl: meta.canonicalUrl,
  
  // Collection defaults
  collectionTitle: pageTitle,
  collectionDescription: pageDescription,
  collectionImage: meta.featuredImage,
};
---
<BaseLayout {...seoProps}>
  <main class="flex-1">
    <div class="container mx-auto px-4">
      {MDXContent ? (
        <MDXContent />
      ) : (
        <>
          {/* Collection header */}
          <header class="text-center py-12">
            <h1 class="text-4xl font-bold mb-4">{pageTitle}</h1>
            {meta.description && (
              <p class="text-xl text-gray-600 max-w-2xl mx-auto">
                {meta.description}
              </p>
            )}
          </header>
          
          {/* Collection items */}
          <Section 
            collection={collection} 
            variant="GridVariant"
          />
        </>
      )}
    </div>
  </main>
</BaseLayout>