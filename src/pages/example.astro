---
// src/pages/example.astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import { 
  query, 
  find,
  whereEquals,
  whereContains,
  whereArrayContains,
  whereAfter,
  sortByDate,
  sortBy,
  and,
  or,
  getRelations,
  getChildren,
  getAncestors,
  getRoots,
  getTree,
  buildRelationshipGraph,
} from '@/utils/query';

// ============================================================================
// 1. BASIC QUERIES
// ============================================================================

// Get all blog posts
const allBlogPosts = await query('blog').all();

// Get first 5 services ordered by order field
const topServices = await query('services')
  .orderBy(sortBy('order', 'asc'))
  .limit(5)
  .get();

// Find specific entry
const webDevService = await find('services', 'web-development');

// Count entries without fetching
const totalTestimonials = await query('testimonials').count();
const totalPortfolio = await query('portfolio').count();
const totalAuthors = await query('authors').count();

// ============================================================================
// 2. FILTERING
// ============================================================================

// Filter by author (if blog posts have authors)
const janesPosts = await query('blog')
  .where(whereEquals('author', 'jane-doe'))
  .all();

// Filter by contains in title
const astroContent = await query('blog')
  .where(whereContains('title', 'astro', false))
  .all();

// Complex filter with AND
const recentPublishedContent = await query('blog')
  .where(and(
    whereAfter('publishDate', '2024-01-01'),
    whereContains('title', 'MDX')
  ))
  .all();

// Filter services by features array
const seoServices = await query('services')
  .where(whereArrayContains('features', 'SEO Optimization'))
  .all();

// ============================================================================
// 3. SORTING & PAGINATION
// ============================================================================

// Sort by date descending with pagination
const page = 1;
const pageSize = 5;
const paginatedBlog = await query('blog')
  .orderBy(sortByDate('publishDate', 'desc'))
  .limit(pageSize)
  .offset((page - 1) * pageSize)
  .get();

// Multiple sort levels
const sortedPortfolio = await query('portfolio')
  .orderBy(sortBy('category', 'asc'))
  .orderBy(sortByDate('publishDate', 'desc'))
  .all();

// ============================================================================
// 4. HIERARCHICAL QUERIES
// ============================================================================

// Get root entries (items with no parent)
const rootServices = await getRoots('services', true);

// Get children of web-development service
const webDevChildren = await getChildren('services', 'web-development', {
  resolve: true,
  recursive: false,
});

// Get full tree structure
let serviceTree = null;
try {
  serviceTree = await getTree('services', 'web-development', 2);
} catch (e) {
  // Service might not exist or have hierarchy
  console.log('No tree structure for web-development');
}

// ============================================================================
// 5. RELATIONS
// ============================================================================

// Get relations for a blog post
let blogRelations = null;
if (allBlogPosts.length > 0) {
  const firstPost = allBlogPosts[0];
  blogRelations = await getRelations('blog', firstPost.id);
}

// Query with relations included
const blogWithRelations = await query('blog')
  .limit(3)
  .withRelations(true, 2)
  .get();

// ============================================================================
// 6. MULTI-COLLECTION QUERIES
// ============================================================================

// Query across multiple collections
const allContentItems = await query(['blog', 'portfolio', 'services'])
  .orderBy(sortByDate('publishDate', 'desc'))
  .limit(10)
  .get();

// ============================================================================
// 7. RELATIONSHIP GRAPH
// ============================================================================

// Build the complete relationship graph
const graph = await buildRelationshipGraph({
  includeIndirect: true,
  maxIndirectDepth: 2,
  cache: true,
});

// ============================================================================
// 8. STATISTICS
// ============================================================================

// Group blog posts by author
const postsByAuthor = allBlogPosts.reduce((acc, post) => {
  const author = post.data.author || 'unknown';
  const authorKey = typeof author === 'string' ? author : author.id || 'unknown';
  acc[authorKey] = (acc[authorKey] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Extract unique tags from all content
const allTags = new Set<string>();
allBlogPosts.forEach(post => {
  const tags = post.data.tags || [];
  tags.forEach((tag: string) => allTags.add(tag));
});

// Group portfolio by category
const portfolioByCategory = sortedPortfolio.reduce((acc, item) => {
  const category = item.data.category || 'uncategorized';
  if (!acc[category]) acc[category] = [];
  acc[category].push(item);
  return acc;
}, {} as Record<string, any[]>);

// ============================================================================
// 9. ADVANCED QUERIES
// ============================================================================

// Find all content with featured images
const contentWithImages = await query(['blog', 'portfolio', 'services'])
  .where((entry) => !!entry.data.featuredImage)
  .all();

// Get services with specific price range (custom filter)
const affordableServices = await query('services')
  .where((entry) => {
    const price = entry.data.price || '';
    const match = price.match(/\$?([\d,]+)/);
    if (match) {
      const amount = parseInt(match[1].replace(/,/g, ''));
      return amount <= 5000;
    }
    return false;
  })
  .all();
---

<BaseLayout 
  title="Query System Playground" 
  description="Interactive examples of the Greastro query system"
>
  <main class="container mx-auto px-4 py-12 max-w-7xl">
    <header class="mb-12 text-center">
      <h1 class="text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
        Query System Playground
      </h1>
      <p class="text-xl text-gray-600">
        Live examples demonstrating the power of Greastro's content query system
      </p>
    </header>

    <!-- System Overview -->
    <section class="mb-12 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-8">
      <h2 class="text-2xl font-bold mb-4">📊 System Overview</h2>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div class="bg-white rounded-lg p-4 text-center">
          <div class="text-3xl font-bold text-blue-600">{graph.totalEntries}</div>
          <div class="text-sm text-gray-600">Total Entries</div>
        </div>
        <div class="bg-white rounded-lg p-4 text-center">
          <div class="text-3xl font-bold text-purple-600">{graph.collections.length}</div>
          <div class="text-sm text-gray-600">Collections</div>
        </div>
        <div class="bg-white rounded-lg p-4 text-center">
          <div class="text-3xl font-bold text-green-600">{allTags.size}</div>
          <div class="text-sm text-gray-600">Unique Tags</div>
        </div>
        <div class="bg-white rounded-lg p-4 text-center">
          <div class="text-3xl font-bold text-orange-600">{Object.keys(postsByAuthor).length}</div>
          <div class="text-sm text-gray-600">Authors</div>
        </div>
      </div>
    </section>

    <!-- 1. Basic Queries -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-blue-600">1.</span> Basic Queries
      </h2>
      
      <div class="grid md:grid-cols-2 gap-6">
        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">All Blog Posts</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('blog').all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {allBlogPosts.length} posts
            {allBlogPosts.length > 0 && (
              <ul class="mt-2 space-y-1">
                {allBlogPosts.slice(0, 3).map(post => (
                  <li class="flex items-center gap-2">
                    <span class="text-blue-600">→</span>
                    <span>{post.data.title}</span>
                  </li>
                ))}
                {allBlogPosts.length > 3 && <li class="text-gray-500">...and {allBlogPosts.length - 3} more</li>}
              </ul>
            )}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Find Specific Entry</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await find('services', 'web-development')</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span>
            {webDevService ? (
              <div class="mt-2">
                <p><strong>Title:</strong> {webDevService.data.title}</p>
                <p><strong>Price:</strong> {webDevService.data.price || 'N/A'}</p>
                <p><strong>Features:</strong> {webDevService.data.features?.length || 0} items</p>
              </div>
            ) : ' Entry not found'}
          </div>
        </div>
      </div>
    </section>

    <!-- 2. Filtering -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-purple-600">2.</span> Filtering
      </h2>
      
      <div class="grid md:grid-cols-2 gap-6">
        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Filter by Author</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('blog')
  .where(whereEquals('author', 'jane-doe'))
  .all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {janesPosts.length} posts by Jane Doe
            {janesPosts.map(post => (
              <div class="mt-2 pl-4 border-l-2 border-purple-200">
                {post.data.title}
              </div>
            ))}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Contains Filter</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('blog')
  .where(whereContains('title', 'astro', false))
  .all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {astroContent.length} posts containing "astro"
            {astroContent.map(post => (
              <div class="mt-2 pl-4 border-l-2 border-purple-200">
                {post.data.title}
              </div>
            ))}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Array Contains</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('services')
  .where(whereArrayContains('features', 'SEO Optimization'))
  .all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {seoServices.length} services with SEO
            {seoServices.map(service => (
              <div class="mt-2 pl-4 border-l-2 border-purple-200">
                {service.data.title}
              </div>
            ))}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Complex Filter (AND)</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('blog')
  .where(and(
    whereAfter('publishDate', '2024-01-01'),
    whereContains('title', 'MDX')
  ))
  .all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {recentPublishedContent.length} recent MDX posts
          </div>
        </div>
      </div>
    </section>

    <!-- 3. Sorting & Pagination -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-green-600">3.</span> Sorting & Pagination
      </h2>
      
      <div class="bg-white border rounded-xl p-6">
        <h3 class="font-bold mb-3 text-lg">Paginated Results</h3>
        <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('blog')
  .orderBy(sortByDate('publishDate', 'desc'))
  .limit({pageSize})
  .offset({(page - 1) * pageSize})
  .get()</code></pre>
        
        <div class="mt-4">
          <div class="flex items-center justify-between mb-3">
            <span class="font-semibold">Page {paginatedBlog.page || 1} Results:</span>
            <div class="text-sm text-gray-600">
              Total: {paginatedBlog.total} | 
              Has Next: {paginatedBlog.hasNext ? '✅' : '❌'} | 
              Has Prev: {paginatedBlog.hasPrev ? '✅' : '❌'}
            </div>
          </div>
          
          {paginatedBlog.entries.map((post, i) => (
            <div class="flex items-center gap-3 p-2 hover:bg-gray-50 rounded">
              <span class="text-gray-400 font-mono text-sm">{i + 1 + (page - 1) * pageSize}.</span>
              <span class="flex-1">{post.data.title}</span>
              <span class="text-sm text-gray-500">
                {post.data.publishDate ? new Date(post.data.publishDate).toLocaleDateString() : 'No date'}
              </span>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- 4. Hierarchical Queries -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-orange-600">4.</span> Hierarchical Queries
      </h2>
      
      <div class="grid md:grid-cols-2 gap-6">
        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Root Entries</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await getRoots('services', true)</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {rootServices.length} root services
            {rootServices.map(service => (
              <div class="mt-2 pl-4 border-l-2 border-orange-200">
                {service.data.title}
              </div>
            ))}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Service Tree</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await getTree('services', 'web-development', 2)</code></pre>
          <div class="mt-3 text-sm">
            {serviceTree ? (
              <div>
                <span class="font-semibold">Tree Structure:</span>
                <div class="mt-2 font-mono text-xs">
                  <div>📁 {serviceTree.entry.data.title}</div>
                  {serviceTree.children.map(child => (
                    <div class="ml-4">
                      └─ 📄 {child.entry.data.title}
                      {child.children.map(grandchild => (
                        <div class="ml-8">└─ 📄 {grandchild.entry.data.title}</div>
                      ))}
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <span>No hierarchical structure found</span>
            )}
          </div>
        </div>
      </div>
    </section>

    <!-- 5. Relations -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-red-600">5.</span> Relations
      </h2>
      
      <div class="bg-white border rounded-xl p-6">
        <h3 class="font-bold mb-3 text-lg">Query with Relations</h3>
        <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('blog')
  .limit(3)
  .withRelations(true, 2)
  .get()</code></pre>
        
        <div class="mt-4">
          <span class="font-semibold">Results with Relations:</span>
          {blogWithRelations.entries.map(entry => {
            const relations = blogWithRelations.relations?.get(`blog:${entry.id}`);
            return (
              <div class="mt-3 p-3 border rounded-lg">
                <div class="font-semibold">{entry.data.title}</div>
                <div class="grid grid-cols-3 gap-2 mt-2 text-sm">
                  <div>
                    <span class="text-gray-500">References:</span>
                    <span class="ml-2 font-mono">{relations?.references.length || 0}</span>
                  </div>
                  <div>
                    <span class="text-gray-500">Referenced By:</span>
                    <span class="ml-2 font-mono">{relations?.referencedBy.length || 0}</span>
                  </div>
                  <div>
                    <span class="text-gray-500">Indirect:</span>
                    <span class="ml-2 font-mono">{relations?.indirect.length || 0}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </section>

    <!-- 6. Multi-Collection -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-pink-600">6.</span> Multi-Collection Queries
      </h2>
      
      <div class="bg-white border rounded-xl p-6">
        <h3 class="font-bold mb-3 text-lg">Query Across Collections</h3>
        <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query(['blog', 'portfolio', 'services'])
  .orderBy(sortByDate('publishDate', 'desc'))
  .limit(10)
  .get()</code></pre>
        
        <div class="mt-4">
          <span class="font-semibold">Mixed Results ({allContentItems.total} total, showing {allContentItems.entries.length}):</span>
          <div class="mt-3 space-y-2">
            {allContentItems.entries.map(entry => (
              <div class="flex items-center gap-3 p-2 hover:bg-gray-50 rounded">
                <span class={`px-2 py-1 rounded text-xs font-semibold text-white
                  ${entry.collection === 'blog' ? 'bg-blue-500' : 
                    entry.collection === 'portfolio' ? 'bg-green-500' : 
                    'bg-purple-500'}`}>
                  {entry.collection}
                </span>
                <span class="flex-1">{entry.data.title}</span>
                <span class="text-sm text-gray-500">
                  {entry.data.publishDate ? new Date(entry.data.publishDate).toLocaleDateString() : ''}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- 7. Statistics -->
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-indigo-600">7.</span> Statistics & Aggregations
      </h2>
      
      <div class="grid md:grid-cols-3 gap-6">
        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Posts by Author</h3>
          <div class="space-y-2">
            {Object.entries(postsByAuthor).map(([author, count]) => (
              <div class="flex justify-between items-center">
                <span class="text-sm">{author}</span>
                <span class="font-mono bg-indigo-100 text-indigo-700 px-2 py-1 rounded text-xs">
                  {count}
                </span>
              </div>
            ))}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Unique Tags</h3>
          <div class="flex flex-wrap gap-2">
            {Array.from(allTags).map(tag => (
              <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                {tag}
              </span>
            ))}
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Portfolio Categories</h3>
          <div class="space-y-2">
            {Object.entries(portfolioByCategory).map(([category, items]) => (
              <div class="flex justify-between items-center">
                <span class="text-sm">{category}</span>
                <span class="font-mono bg-indigo-100 text-indigo-700 px-2 py-1 rounded text-xs">
                  {items.length}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- 8. Advanced Queries -->
    <!-- <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6 flex items-center gap-2">
        <span class="text-teal-600">8.</span> Advanced Queries
      </h2>
      
      <div class="grid md:grid-cols-2 gap-6">
        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Content with Images</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query(['blog', 'portfolio', 'services'])
  .where((entry) => !!entry.data.featuredImage)
  .all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Result:</span> {contentWithImages.length} items with images
            <div class="mt-2 grid grid-cols-2 gap-2">
              {contentWithImages.slice(0, 4).map(item => (
                <div class="text-xs p-2 bg-gray-50 rounded truncate">
                  {item.data.title}
                </div>
              ))}
            </div>
          </div>
        </div>

        <div class="bg-white border rounded-xl p-6">
          <h3 class="font-bold mb-3 text-lg">Custom Price Filter</h3>
          <pre class="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
<code>await query('services')
  .where((entry) => {
    // Parse price and check if <= $5000
    const price = entry.data.price || '';
    const match = price.match(/\$?([\d,]+)/);
    if (match) {
      const amount = parseInt(match[1].replace(/,/g, ''));
      return amount <= 5000;
    }
    return false;
  })
  .all()</code></pre>
          <div class="mt-3 text-sm">
            <span class="font-semibold">Affordable Services (≤ $5000):</span>
            {affordableServices.map(service => (
              <div class="mt-2 flex justify-between items-center p-2 bg-gray-50 rounded">
                <span>{service.data.title}</span>
                <span class="text-green-600 font-semibold">{service.data.price}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section> -->

    <!-- Query Performance -->
    <section class="mb-12 bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-8">
      <h2 class="text-2xl font-bold mb-4">⚡ Query Performance</h2>
      <div class="grid md:grid-cols-3 gap-4 text-sm">
        <div class="bg-white rounded-lg p-4">
          <div class="font-semibold mb-2">Graph Build</div>
          <div class="text-gray-600">
            Built once at startup<br/>
            Cached for all queries<br/>
            {graph.totalEntries} entries indexed
          </div>
        </div>
        <div class="bg-white rounded-lg p-4">
          <div class="font-semibold mb-2">Relations</div>
          <div class="text-gray-600">
            Direct & indirect<br/>
            Max depth: 3 hops<br/>
            Lazy loaded on demand
          </div>
        </div>
        <div class="bg-white rounded-lg p-4">
          <div class="font-semibold mb-2">Collections</div>
          <div class="text-gray-600">
            {graph.collections.join(', ')}
          </div>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <footer class="text-center py-8">
      <a 
        href="/docs" 
        class="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        View Documentation
      </a>
    </footer>
  </main>
</BaseLayout>